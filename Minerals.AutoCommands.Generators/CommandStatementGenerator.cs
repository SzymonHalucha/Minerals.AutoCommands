namespace Minerals.AutoCommands.Generators
{
    public static class CommandStatementGenerator
    {
        public static SourceText AppendPartialClass(CommandObject cmdObj)
        {
            var builder = new CodeBuilder();
            builder.AddAutoGeneratedHeader(Assembly.GetExecutingAssembly());
            AppendUsings(builder);
            AppendNamespace(builder, cmdObj);

            builder.AddAutoGeneratedAttributes(typeof(ClassDeclarationSyntax));
            AppendPartialClass(builder, cmdObj);

            AppendArgumentsProperty(builder);
            AppendParentProperty(builder);
            AppendEvaluateMethod(builder);
            AppendGetNextCommandMethod(builder);
            AppendCheckRequiredArgumentsMethod(builder);
            builder.CloseAllBlocks();

            return SourceText.From(builder.ToString(), Encoding.UTF8);
        }

        private static void AppendUsings(CodeBuilder builder)
        {
            builder.WriteLine("using global::System.Linq;").NewLine();
        }

        private static void AppendNamespace(CodeBuilder builder, CommandObject cmdObj)
        {
            builder.WriteLine("namespace ").Write(cmdObj.Namespace).OpenBlock();
        }

        private static void AppendPartialClass(CodeBuilder builder, CommandObject cmdObj)
        {
            builder.NewLine().WriteIteration(cmdObj.Modifiers, (builder1, item, next) =>
            {
                builder1.Write(item).Write(" ");
            });
            builder.Write("class ")
                .Write(cmdObj.Name)
                .Write(" : global::Minerals.AutoCommands.Interfaces.ICommandStatement")
                .OpenBlock();
        }

        private static void AppendArgumentsProperty(CodeBuilder builder)
        {
            builder.WriteLine(@"public global::System.Collections.Generic.List<global::Minerals.AutoCommands.Interfaces.ICommand> Arguments { get; } = new global::System.Collections.Generic.List<global::Minerals.AutoCommands.Interfaces.ICommand>();");
        }

        private static void AppendParentProperty(CodeBuilder builder)
        {
            builder.NewLine().WriteBlock("""

            public global::Minerals.AutoCommands.Interfaces.ICommandStatement Parent
            {
                get
                {
                    return _parent;
                }
                set
                {
                    if (_parent != null)
                    {
                        _parent.Arguments.Remove(this);
                    }
                    _parent = value;
                    _parent.Arguments.Add(this);
                }
            }

            private global::Minerals.AutoCommands.Interfaces.ICommandStatement _parent = null;
            """);
        }

        private static void AppendEvaluateMethod(CodeBuilder builder)
        {
            builder.NewLine().WriteBlock("""

            public bool Evaluate(string[] args, int index, global::System.StringComparison comparison)
            {
                if (index >= args.Length)
                {
                    return true;
                }
                var nextCommand = GetNextCommand(args, index, comparison);
                nextCommand.Parent = this;
                nextCommand.Evaluate(args, ++index, comparison);
                return CheckRequiredArguments();
            }
            """);
        }

        private static void AppendGetNextCommandMethod(CodeBuilder builder)
        {
            builder.NewLine().WriteBlock("""

            private global::Minerals.AutoCommands.Interfaces.ICommand GetNextCommand(string[] args, int index, global::System.StringComparison comparison)
            {
                var nextCommand = global::Minerals.AutoCommands.CommandParser.Parse(args[index], comparison);
                if (nextCommand == null)
                {
                    throw new global::Minerals.AutoCommands.Exceptions.CommandNotFoundException($"The command '{args[index]}' was not found.")
                        .AddData(("Parent", Parent), ("Index", index), ("Comparison", comparison));
                }
                if (!PossibleArguments.Contains(nextCommand.GetType()))
                {
                    throw new global::Minerals.AutoCommands.Exceptions.CommandNotSupportedException($"Command of the type '{nextCommand.GetType().Name}' is not supported.")
                        .AddData(("Command", nextCommand), ("Parent", Parent), ("Index", index), ("Comparison", comparison));
                }
                if (Arguments.Any(x => x.GetType() == nextCommand.GetType()))
                {
                    throw new global::Minerals.AutoCommands.Exceptions.CommandDuplicateException($"The '{nextCommand.GetType().Name}' command type has already been used.")
                        .AddData(("Command", nextCommand), ("Parent", Parent), ("Index", index), ("Comparison", comparison));
                }
                return nextCommand;
            }
            """);
        }

        private static void AppendCheckRequiredArgumentsMethod(CodeBuilder builder)
        {
            builder.NewLine().WriteBlock("""

            private bool CheckRequiredArguments()
            {
                foreach (var requiredArg in RequiredArguments)
                {
                    if (!Arguments.Any(x => x.GetType() == requiredArg))
                    {
                        throw new global::Minerals.AutoCommands.Exceptions.CommandRequiredException($"The '{requiredArg.Name}' argument type is required.")
                            .AddData(("CommandType", requiredArg), ("Parent", this));
                    }
                }
                return true;
            }
            """);
        }
    }
}