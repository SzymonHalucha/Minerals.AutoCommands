namespace Minerals.AutoCommands.Generators
{
    [Generator]
    public class CommandsGenerator : IIncrementalGenerator
    {
        public void Initialize(IncrementalGeneratorInitializationContext context)
        {
            var arguments = context.SyntaxProvider.ForAttributeWithMetadataName
            (
                "Minerals.AutoCommands.Attributes.CommandArgumentAttribute",
                static (x, _) => x is ClassDeclarationSyntax,
                static (x, _) => new CommandObject(x)
            );

            var statements = context.SyntaxProvider.ForAttributeWithMetadataName
            (
                "Minerals.AutoCommands.Attributes.CommandStatementAttribute",
                static (x, _) => x is ClassDeclarationSyntax,
                static (x, _) => new CommandObject(x)
            );

            context.RegisterSourceOutput(arguments, static (ctx, element) =>
            {
                string fileName = $"{element.Name}.g.cs";
                ctx.AddSource(fileName, CommandArgumentGenerator.AppendPartialClass(element));
            });

            context.RegisterSourceOutput(statements, static (ctx, element) =>
            {
                string fileName = $"{element.Name}.g.cs";
                ctx.AddSource(fileName, CommandStatementGenerator.AppendPartialClass(element));
            });

            var combined = statements.Collect().Combine(arguments.Collect());
            context.RegisterSourceOutput(combined, static (ctx, element) =>
            {
                string fileName = "CommandParser.g.cs";
                ctx.AddSource(fileName, GeneratePartialClass(element.Left, element.Right));
            });
        }

        private static SourceText GeneratePartialClass(ImmutableArray<CommandObject> statObjs, ImmutableArray<CommandObject> argObjs)
        {
            var builder = new CodeBuilder();
            builder.AddAutoGeneratedHeader(Assembly.GetExecutingAssembly());
            AppendNamespace(builder);
            AppendClass(builder);

            AppendParseMethod(builder, statObjs, argObjs);
            builder.CloseAllBlocks();

            return SourceText.From(builder.ToString(), Encoding.UTF8);
        }

        private static void AppendNamespace(CodeBuilder builder)
        {
            builder.WriteLine("namespace Minerals.AutoCommands").OpenBlock();
        }

        private static void AppendClass(CodeBuilder builder)
        {
            builder.AddAutoGeneratedAttributes(typeof(ClassDeclarationSyntax));
            builder.WriteLine("public static class CommandParser").OpenBlock();
        }

        private static void AppendParseMethod(CodeBuilder builder, ImmutableArray<CommandObject> statObjs, ImmutableArray<CommandObject> argObjs)
        {
            var cmdObjs = statObjs.Concat(argObjs);
            builder.WriteLine("public static global::Minerals.AutoCommands.Interfaces.ICommand Parse(string arg, global::System.StringComparison comparison)")
                .OpenBlock();

            if (cmdObjs.Any())
            {
                AppendConditions(builder, cmdObjs);
                builder.WriteLine("else return null;");
            }
            else
            {
                builder.WriteLine("return null;");
            }

            builder.CloseBlock();
        }

        private static void AppendConditions(CodeBuilder builder, IEnumerable<CommandObject> cmdObjs)
        {
            bool isFirst = true;
            foreach (var cmd in cmdObjs)
            {
                foreach (var alias in cmd.Aliases)
                {
                    if (isFirst)
                    {
                        builder.NewLine();
                        isFirst = false;
                    }
                    else
                    {
                        builder.WriteLine("else ");
                    }
                    builder.Write(@"if (arg.Equals(""")
                        .Write(alias)
                        .Write(@""", comparison)) return (global::Minerals.AutoCommands.Interfaces.ICommand)new ")
                        .Write(cmd.Namespace)
                        .Write(".")
                        .Write(cmd.Name)
                        .Write("();");
                }
            }
        }
    }
}