namespace Minerals.AutoCommands.Generators
{
    public static class CommandParserGenerator
    {
        public static SourceText AppendPartialClass(ImmutableArray<CommandObject> statObjs, ImmutableArray<CommandObject> argObjs)
        {
            var builder = new CodeBuilder();
            var cmdObjs = statObjs.Concat(argObjs);
            builder.AddAutoGeneratedHeader(Assembly.GetExecutingAssembly());
            AppendNamespace(builder);
            AppendClass(builder);

            AppendParseMethod(builder, cmdObjs);
            builder.CloseAllBlocks();

            return SourceText.From(builder.ToString(), Encoding.UTF8);
        }

        private static void AppendNamespace(CodeBuilder builder)
        {
            builder.WriteLine("namespace Minerals.AutoCommands").OpenBlock();
        }

        private static void AppendClass(CodeBuilder builder)
        {
            builder.AddAutoGeneratedAttributes(typeof(ClassDeclarationSyntax));
            builder.WriteLine("public sealed class CommandParser : global::Minerals.AutoCommands.Interfaces.ICommandParser").OpenBlock();
        }

        private static void AppendParseMethod(CodeBuilder builder, IEnumerable<CommandObject> cmdObjs)
        {
            builder.WriteLine("public global::Minerals.AutoCommands.Interfaces.ICommand Parse(string arg, global::System.StringComparison comparison)")
                .OpenBlock();

            if (cmdObjs.Any())
            {
                AppendConditions(builder, cmdObjs);
            }

            builder.WriteLine("return null;");
            builder.CloseBlock();
        }

        private static void AppendConditions(CodeBuilder builder, IEnumerable<CommandObject> cmdObjs)
        {
            foreach (var cmd in cmdObjs)
            {
                foreach (var alias in cmd.Aliases)
                {
                    builder.WriteLine(@"if (arg.Equals(""")
                        .Write(alias)
                        .Write(@""", comparison)) return (global::Minerals.AutoCommands.Interfaces.ICommand)new ")
                        .Write(cmd.Namespace)
                        .Write(".")
                        .Write(cmd.Name)
                        .Write("();");
                }
            }
        }
    }
}