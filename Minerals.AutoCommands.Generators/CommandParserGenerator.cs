namespace Minerals.AutoCommands.Generators
{
    [Generator]
    public class CommandParserGenerator : IIncrementalGenerator
    {
        public void Initialize(IncrementalGeneratorInitializationContext context)
        {
            var commands = context.SyntaxProvider.CreateSyntaxProvider
            (
                static (x, _) => IsValidSyntax(x),
                static (x, _) => IsValidSymbol(x) ? new CommandStatementObject(x) : CommandStatementObject.Empty
            );

            context.RegisterSourceOutput(commands.Collect(), static (ctx, element) =>
            {
                string fileName = "CommandParser.g.cs";
                ctx.AddSource(fileName, AppendPartialClass(element));
            });
        }

        private static bool IsValidSyntax(SyntaxNode node)
        {
            return node is ClassDeclarationSyntax cls
            && cls.BaseList is not null
            && cls.BaseList.Types.Count is > 0;
        }

        private static bool IsValidSymbol(GeneratorSyntaxContext context)
        {
            var baseSymbol = context.SemanticModel.Compilation.GetTypeByMetadataName("Minerals.AutoCommands.CommandStatement");
            var currentSymbol = context.SemanticModel.GetDeclaredSymbol(context.Node) as ITypeSymbol;
            return SymbolEqualityComparer.Default.Equals(baseSymbol, currentSymbol?.BaseType);
        }

        public static SourceText AppendPartialClass(ImmutableArray<CommandStatementObject> cmdObjs)
        {
            var builder = new CodeBuilder();
            builder.AddAutoGeneratedHeader(Assembly.GetExecutingAssembly());
            AppendNamespace(builder);
            AppendClass(builder);

            AppendAliasesField(builder, cmdObjs);

            AppendParseMethod(builder, cmdObjs);
            AppendIsAliasMethod(builder);
            builder.CloseAllBlocks();

            return SourceText.From(builder.ToString(), Encoding.UTF8);
        }

        private static void AppendNamespace(CodeBuilder builder)
        {
            builder.WriteLine("namespace Minerals.AutoCommands").OpenBlock();
        }

        private static void AppendClass(CodeBuilder builder)
        {
            builder.AddAutoGeneratedAttributes(typeof(ClassDeclarationSyntax));
            builder.WriteLine("public sealed class CommandParser")
                .Write(" : global::Minerals.AutoCommands.Interfaces.ICommandParser")
                .OpenBlock();
        }

        private static void AppendAliasesField(CodeBuilder builder, ImmutableArray<CommandStatementObject> cmdObjs)
        {
            builder.WriteLine(@"private readonly string[] _aliases = new string[] { ");
            if (cmdObjs.Any())
            {
                foreach (var obj in cmdObjs)
                {
                    if (obj.Equals(CommandStatementObject.Empty) is false)
                    {
                        foreach (var alias in obj.Aliases)
                        {
                            builder.Write(@"""").Write(alias).Write(@""", ");
                        }
                    }
                }
            }
            builder.Write("};");
        }

        private static void AppendParseMethod(CodeBuilder builder, ImmutableArray<CommandStatementObject> cmdObjs)
        {
            builder.NewLine().WriteLine("public global::Minerals.AutoCommands.Interfaces.ICommandStatement")
                .Write(" Parse(string arg, global::System.StringComparison comparison)")
                .OpenBlock();

            if (cmdObjs.Any())
            {
                foreach (var obj in cmdObjs)
                {
                    if (obj.Equals(CommandStatementObject.Empty) is false)
                    {
                        foreach (var alias in obj.Aliases)
                        {
                            builder.WriteLine(@"if (arg.Equals(""");
                            builder.Write(alias);
                            builder.Write(@""", comparison)) return (global::Minerals.AutoCommands.Interfaces.ICommandStatement)new ");
                            builder.Write(obj.Namespace);
                            builder.Write(".");
                            builder.Write(obj.Name);
                            builder.Write("();");
                        }
                    }
                }
            }

            builder.WriteLine("return null;");
            builder.CloseBlock();
        }

        private static void AppendIsAliasMethod(CodeBuilder builder)
        {
            builder.NewLine().NewLine().WriteBlock("""
            public bool IsAlias(string text, global::System.StringComparison comparison)
            {
                foreach (var item in _aliases)
                {
                    if (text.Equals(item, comparison))
                    {
                        return true;
                    }
                }
                return false;
            }
            """);
        }
    }
}