namespace Minerals.AutoCommands.Generators
{
    public static class CommandValueGenerator
    {
        public static SourceText AppendPartialClass(CommandObject cmdObj)
        {
            var builder = new CodeBuilder();
            builder.AddAutoGeneratedHeader(Assembly.GetExecutingAssembly());
            AppendUsings(builder);
            AppendNamespace(builder, cmdObj);

            builder.AddAutoGeneratedAttributes(typeof(ClassDeclarationSyntax));
            AppendPartialClass(builder, cmdObj);

            AppendParentProperty(builder);
            AppendValueProperty(builder);

            AppendGetHelpMethod(builder);
            AppendEvaluateMethod(builder);
            AppendGetCommandValueMethod(builder);
            AppendGetNextCommandMethod(builder);

            builder.CloseAllBlocks();

            return SourceText.From(builder.ToString(), Encoding.UTF8);
        }

        private static void AppendUsings(CodeBuilder builder)
        {
            builder.WriteLine("using global::System.Linq;").NewLine();
        }

        private static void AppendNamespace(CodeBuilder builder, CommandObject cmdObj)
        {
            builder.WriteLine("namespace ").Write(cmdObj.Namespace).OpenBlock();
        }

        private static void AppendPartialClass(CodeBuilder builder, CommandObject cmdObj)
        {
            builder.NewLine().WriteIteration(cmdObj.Modifiers, (builder1, item, next) =>
            {
                builder1.Write(item).Write(" ");
            });
            builder.Write("class ")
                .Write(cmdObj.Name)
                .Write(" : global::Minerals.AutoCommands.Interfaces.ICommandValue")
                .OpenBlock();
        }

        private static void AppendParentProperty(CodeBuilder builder)
        {
            builder.NewLine().WriteBlock("""
            public global::Minerals.AutoCommands.Interfaces.ICommand Parent
            {
                get
                {
                    return _parent;
                }
                set
                {
                    if (_parent is global::Minerals.AutoCommands.Interfaces.ICommandStatement statement0)
                    {
                        statement0.Arguments.Remove(this);
                    }
                    if (value is global::Minerals.AutoCommands.Interfaces.ICommandStatement statement1)
                    {
                        statement1.Arguments.Add(this);
                    }
                    _parent = value;
                }
            }

            private global::Minerals.AutoCommands.Interfaces.ICommand _parent = null;
            """);
        }

        private static void AppendValueProperty(CodeBuilder builder)
        {
            builder.NewLine().WriteLine(@"public string Value { get; private set; } = string.Empty;");
        }

        //TODO: Write Command Value Help
        private static void AppendGetHelpMethod(CodeBuilder builder)
        {
            builder.NewLine().WriteBlock("""

            public string GetHelp()
            {
                return "Value Help";
            }
            """);
        }

        private static void AppendEvaluateMethod(CodeBuilder builder)
        {
            builder.NewLine().WriteBlock("""

            public bool Evaluate(global::Minerals.AutoCommands.Interfaces.ICommandPipeline pipeline, string[] args, int index)
            {
                Value = GetCommandValue(pipeline, args, index);
                if (++index >= args.Length)
                {
                    return true;
                }
                var next = GetNextCommand(pipeline, args, index);
                next.Parent = Parent;
                return next.Evaluate(pipeline, args, ++index);
            }
            """);
        }

        private static void AppendGetCommandValueMethod(CodeBuilder builder)
        {
            builder.NewLine().WriteBlock("""
            
            private string GetCommandValue(global::Minerals.AutoCommands.Interfaces.ICommandPipeline pipeline, string[] args, int index)
            {
                if (index >= args.Length)
                {
                    throw new global::Minerals.AutoCommands.Exceptions.CommandValueNotFoundException(pipeline, this);
                }
                if (!PossibleValues.Contains(args[index]) && PossibleValues.Length > 0)
                {
                    throw new global::Minerals.AutoCommands.Exceptions.CommandValueException(pipeline, this, args[index]);
                }
                return args[index];
            }
            """);
        }

        private static void AppendGetNextCommandMethod(CodeBuilder builder)
        {
            builder.NewLine().WriteBlock("""

            private global::Minerals.AutoCommands.Interfaces.ICommand GetNextCommand(global::Minerals.AutoCommands.Interfaces.ICommandPipeline pipeline, string[] args, int index)
            {
                var next = pipeline.Parser.Parse(args[index], pipeline.Comparison);
                if (next == null)
                {
                    throw new global::Minerals.AutoCommands.Exceptions.CommandNotFoundException(pipeline, this, args[index]);
                }
                if (next is global::Minerals.AutoCommands.Interfaces.ICommandStatement)
                {
                    throw new global::Minerals.AutoCommands.Exceptions.CommandOrderException(pipeline, this, next);
                }
                if (!(Parent as global::Minerals.AutoCommands.Interfaces.ICommandStatement).PossibleArguments.Contains(next.GetType()))
                {
                    throw new global::Minerals.AutoCommands.Exceptions.CommandNotSupportedException(pipeline, this, next);
                }
                if ((Parent as global::Minerals.AutoCommands.Interfaces.ICommandStatement).Arguments.Any(x => x.GetType() == next.GetType()))
                {
                    throw new global::Minerals.AutoCommands.Exceptions.CommandDuplicateException(pipeline, this, next);
                }
                return next;
            }
            """);
        }
    }
}