//HintName: TestArgument1.g.cs
// <auto-generated>
// This code was generated by a tool.
// Name: Minerals.AutoCommands.Generators
// Version: {Removed}
// </auto-generated>
using global::System.Linq;

namespace Minerals.Examples
{
    [global::System.Diagnostics.DebuggerNonUserCode]
    [global::System.Runtime.CompilerServices.CompilerGenerated]
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public partial class TestArgument1 : global::Minerals.AutoCommands.Interfaces.ICommandArgument
    {
        public string Value { get; set; }
        
        public global::Minerals.AutoCommands.Interfaces.ICommandStatement Parent
        {
            get
            {
                return _parent;
            }
            set
            {
                if (_parent != null)
                {
                    _parent.Arguments.Remove(this);
                }
                _parent = value;
                _parent.Arguments.Add(this);
            }
        }
        
        private global::Minerals.AutoCommands.Interfaces.ICommandStatement _parent = null;
        
        public bool Evaluate(string[] args, int index, global::System.StringComparison comparison)
        {
            Value = GetCommandArgumentValue(args, index, comparison);
            if (++index >= args.Length)
            {
                return true;
            }
            var nextCommand = GetNextCommand(args, index, comparison);
            nextCommand.Parent = Parent;
            return nextCommand.Evaluate(args, ++index, comparison);
        }
        
        private string GetCommandArgumentValue(string[] args, int index, global::System.StringComparison comparison)
        {
            if (index >= args.Length)
            {
                throw new global::Minerals.AutoCommands.Exceptions.CommandValueNotFoundException($"Value for the argument type '{GetType().Name}' was not found.")
                    .AddData(("Parent", this), ("Index", index), ("Comparison", comparison));
            }
            if (!PossibleValues.Contains(args[index]) && PossibleValues.Length > 0)
            {
                throw new global::Minerals.AutoCommands.Exceptions.CommandValueException($"The value '{args[index]}' is not a valid value for the argument type '{GetType().Name}'.")
                    .AddData(("Value", args[index]), ("Parent", this), ("Index", index), ("Comparison", comparison));
            }
            return args[index];
        }
        
        private global::Minerals.AutoCommands.Interfaces.ICommand GetNextCommand(string[] args, int index, global::System.StringComparison comparison)
        {
            var nextCommand = global::Minerals.AutoCommands.CommandParser.Parse(args[index], comparison);
            if (nextCommand == null)
            {
                throw new global::Minerals.AutoCommands.Exceptions.CommandNotFoundException($"The command '{args[index]}' was not found.")
                    .AddData(("Parent", Parent), ("Index", index), ("Comparison", comparison));
            }
            if (nextCommand is global::Minerals.AutoCommands.Interfaces.ICommandStatement)
            {
                throw new global::Minerals.AutoCommands.Exceptions.CommandOrderException($"The command statement ('{nextCommand.GetType().Name}') cannot occur after the command argument ('{GetType().Name}').")
                    .AddData(("Command", nextCommand), ("Parent", Parent), ("Index", index), ("Comparison", comparison));
            }
            if (!Parent.PossibleArguments.Contains(nextCommand.GetType()))
            {
                throw new global::Minerals.AutoCommands.Exceptions.CommandNotSupportedException($"Command of the type '{nextCommand.GetType().Name}' is not supported.")
                    .AddData(("Command", nextCommand), ("Parent", Parent), ("Index", index), ("Comparison", comparison));
            }
            if (Parent.Arguments.Any(x => x.GetType() == nextCommand.GetType()))
            {
                throw new global::Minerals.AutoCommands.Exceptions.CommandDuplicateException($"The '{nextCommand.GetType().Name}' command type has already been used.")
                    .AddData(("Command", nextCommand), ("Parent", Parent), ("Index", index), ("Comparison", comparison));
            }
            return nextCommand;
        }
    }
}