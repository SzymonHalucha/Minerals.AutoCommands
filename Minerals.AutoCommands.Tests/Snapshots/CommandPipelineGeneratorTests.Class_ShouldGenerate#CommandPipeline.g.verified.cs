//HintName: CommandPipeline.g.cs
// <auto-generated>
// This code was generated by a tool.
// Name: Minerals.AutoCommands.Generators
// Version: {Removed}
// </auto-generated>
namespace Minerals.AutoCommands
{
    [global::System.Diagnostics.DebuggerNonUserCode]
    [global::System.Runtime.CompilerServices.CompilerGenerated]
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed class CommandPipeline : global::Minerals.AutoCommands.Interfaces.ICommandPipeline
    {
        private readonly global::System.Collections.Generic.Dictionary<global::System.Type, global::System.Action<global::System.Exception>> _exceptionsHandlers = new global::System.Collections.Generic.Dictionary<global::System.Type, global::System.Action<global::System.Exception>>();

        public global::Minerals.AutoCommands.Interfaces.ICommand Evaluate(string[] args, global::System.StringComparison comparison)
        {
            try
            {
                global::Minerals.AutoCommands.Interfaces.ICommand command = global::Minerals.AutoCommands.CommandParser.Parse(args[0], comparison);
                command?.Evaluate(args, 1, comparison);
                return command;
            }
            catch (global::System.Exception exception)
            {
                if (_exceptionsHandlers.TryGetValue(exception.GetType(), out var handler))
                {
                    handler(exception);
                }
                else
                {
                    global::Minerals.AutoCommands.CommandPipelineHandlers.HandleException(exception);
                }
            }
            return null;
        }

        public void CustomExceptionHandler<T>(global::System.Action<T> exceptionHandler) where T : global::Minerals.AutoCommands.Exceptions.CommandExceptionBase, new()
        {
            _exceptionsHandlers.Add(typeof(T), exception => exceptionHandler((T)exception));
        }
    }
}