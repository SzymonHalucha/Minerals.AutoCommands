//HintName: TestCommand1.g.cs
// <auto-generated>
// This code was generated by a tool.
// Name: Minerals.AutoCommands.Generators
// Version: {Removed}
// </auto-generated>
using global::System.Linq;

namespace Minerals.Examples
{
    [global::System.Diagnostics.DebuggerNonUserCode]
    [global::System.Runtime.CompilerServices.CompilerGenerated]
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public partial class TestCommand1 : global::Minerals.AutoCommands.Interfaces.ICommandStatement
    {
        public global::System.Collections.Generic.List<global::Minerals.AutoCommands.Interfaces.ICommand> Arguments { get; } = new global::System.Collections.Generic.List<global::Minerals.AutoCommands.Interfaces.ICommand>();
        
        public global::Minerals.AutoCommands.Interfaces.ICommandStatement Parent
        {
            get
            {
                return _parent;
            }
            set
            {
                if (_parent != null)
                {
                    _parent.Arguments.Remove(this);
                }
                _parent = value;
                _parent.Arguments.Add(this);
            }
        }
        
        private global::Minerals.AutoCommands.Interfaces.ICommandStatement _parent = null;
        
        public bool Evaluate(string[] args, int index, global::System.StringComparison comparison)
        {
            if (index >= args.Length)
            {
                return true;
            }
            var nextCommand = GetNextCommand(args, index, comparison);
            nextCommand.Parent = this;
            nextCommand.Evaluate(args, ++index, comparison);
            return CheckRequiredArguments();
        }
        
        private global::Minerals.AutoCommands.Interfaces.ICommand GetNextCommand(string[] args, int index, global::System.StringComparison comparison)
        {
            var nextCommand = global::Minerals.AutoCommands.CommandParser.Parse(args[index], comparison);
            if (nextCommand == null)
            {
                throw new global::Minerals.AutoCommands.Exceptions.CommandNotFoundException($"The command '{args[index]}' was not found.")
                    .AddData(("Parent", Parent), ("Index", index), ("Comparison", comparison));
            }
            if (!PossibleArguments.Contains(nextCommand.GetType()))
            {
                throw new global::Minerals.AutoCommands.Exceptions.CommandNotSupportedException($"Command of the type '{nextCommand.GetType().Name}' is not supported.")
                    .AddData(("Command", nextCommand), ("Parent", Parent), ("Index", index), ("Comparison", comparison));
            }
            if (Arguments.Any(x => x.GetType() == nextCommand.GetType()))
            {
                throw new global::Minerals.AutoCommands.Exceptions.CommandDuplicateException($"The '{nextCommand.GetType().Name}' command type has already been used.")
                    .AddData(("Command", nextCommand), ("Parent", Parent), ("Index", index), ("Comparison", comparison));
            }
            return nextCommand;
        }
        
        private bool CheckRequiredArguments()
        {
            foreach (var requiredArg in RequiredArguments)
            {
                if (!Arguments.Any(x => x.GetType() == requiredArg))
                {
                    throw new global::Minerals.AutoCommands.Exceptions.CommandRequiredException($"The '{requiredArg.Name}' argument type is required.")
                        .AddData(("CommandType", requiredArg), ("Parent", this));
                }
            }
            return true;
        }
    }
}