namespace Minerals.AutoCommands.Utils
{
    public static class CodeBuilderExtensions
    {
        public static CodeBuilder AddAutoGeneratedHeader(this CodeBuilder builder, Assembly assembly)
        {
            var title = assembly.GetCustomAttribute<AssemblyTitleAttribute>().Title;
            var version = assembly.GetCustomAttribute<AssemblyInformationalVersionAttribute>().InformationalVersion;
            builder.WriteLine("// <auto-generated>");
            builder.WriteLine("// This code was generated by a tool.");
            builder.Write("// Name: ").WriteLine(title);
            builder.Write("// Version: ").WriteLine(version);
            builder.WriteLine("// </auto-generated>");
            return builder;
        }

        public static CodeBuilder AddAutoGeneratedAttributes<T>(this CodeBuilder builder) where T : SyntaxNode
        {
            if (typeof(T) == typeof(ClassDeclarationSyntax) || typeof(T) == typeof(StructDeclarationSyntax))
            {
                builder.WriteLine("[global::System.Diagnostics.DebuggerNonUserCode]");
                builder.WriteLine("[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]");
            }
            builder.WriteLine("[global::System.Runtime.CompilerServices.CompilerGenerated]");
            return builder;
        }

        public static CodeBuilder AddAllUsings(this CodeBuilder builder, SyntaxNode usingsFrom, out bool hasUsings)
        {
            var usings = usingsFrom.FirstAncestorOrSelf<CompilationUnitSyntax>()?.Usings;
            hasUsings = usings != null;
            if (hasUsings)
            {
                foreach (var item in usings!)
                {
                    builder.WriteLine(item.ToString());
                }
            }
            return builder;
        }

        public static CodeBuilder AddNamespace(this CodeBuilder builder, SyntaxNode namespaceFrom, out bool hasNamespace)
        {
            var ns = namespaceFrom.FirstAncestorOrSelf<NamespaceDeclarationSyntax>();
            hasNamespace = ns != null;
            if (hasNamespace)
            {
                builder.Write("namespace ").WriteLine(ns!.Name.ToString()).OpenBlock();
            }
            return builder;
        }
    }
}